# -*- coding: utf-8 -*-
"""TimeSeries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H7JGDUZgjxu6Md_gTWmc5C--ri-8X6GZ

**Time Series Cryptocurrency**
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip "/content/drive/MyDrive/Dicoding/Sub2-Time Series Cryptocurrency/Time Series Cryptocurrency.zip"

import pandas as pd

dataset = pd.read_csv("/content/gemini_LTCUSD_2020_1min.csv")
dataset

dataset.isnull().sum()

import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    if shuffle_buffer > 0:
        ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set, val_set = train_test_split(dataset.iloc[:, 3:], test_size=0.2, shuffle=False)
scaler = MinMaxScaler().fit(train_set)
train_set = scaler.transform(train_set)[:, 0]
val_set = scaler.transform(val_set)[:, 0]
train_set = windowed_dataset(train_set, window_size=64, batch_size=128, shuffle_buffer=1000)
val_set = windowed_dataset(val_set, window_size=64, batch_size=128, shuffle_buffer=1000)

import tensorflow as tf

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(64, return_sequences=True, input_shape=(64,1)),
    tf.keras.layers.LSTM(32),
    tf.keras.layers.Dense(32, activation=tf.keras.activations.swish),
    tf.keras.layers.Dense(1),
])

model.compile(
    loss=tf.keras.losses.Huber(),
    optimizer=tf.keras.optimizers.Adam(1e-4),
    metrics=["mae"]
)
model.summary()

history = model.fit(
    train_set,
    epochs=10,
    validation_data=val_set,
    callbacks=[
        tf.keras.callbacks.EarlyStopping(
            patience=10,
            restore_best_weights=True
        ),
        tf.keras.callbacks.ReduceLROnPlateau(
            monitor='val_loss',
            patience=5)]
)

import matplotlib.pyplot as plt

plt.title('Loss')
plt.plot(history.history['loss'], label='train_set')
plt.plot(history.history['val_loss'], label='val_set')
plt.legend()
plt.show();

plt.title('Mae')
plt.plot(history.history['mae'], label='train_set')
plt.plot(history.history['val_mae'], label='val_set')
plt.legend()
plt.show();